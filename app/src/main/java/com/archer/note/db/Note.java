package com.archer.note.db;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.Date;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTES".
 */
public class Note implements Parcelable {

    private Long id;
    private String status;
    /** Not-null value. */
    private String title;
    private String textContent;
    private String voiceContent;
    private Long type;
    private java.util.Date date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;

    private NoteType noteType;
    private Long noteType__resolvedKey;


    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String status, String title, String textContent, String voiceContent, Long type, java.util.Date date) {
        this.id = id;
        this.status = status;
        this.title = title;
        this.textContent = textContent;
        this.voiceContent = voiceContent;
        this.type = type;
        this.date = date;
    }



    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getTextContent() {
        return textContent;
    }

    public void setTextContent(String textContent) {
        this.textContent = textContent;
    }

    public String getVoiceContent() {
        return voiceContent;
    }

    public void setVoiceContent(String voiceContent) {
        this.voiceContent = voiceContent;
    }

    public Long getType() {
        return type;
    }

    public void setType(Long type) {
        this.type = type;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    public NoteType getNoteType() {
        Long __key = this.type;
        if (noteType__resolvedKey == null || !noteType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteTypeDao targetDao = daoSession.getNoteTypeDao();
            NoteType noteTypeNew = targetDao.load(__key);
            synchronized (this) {
                noteType = noteTypeNew;
            	noteType__resolvedKey = __key;
            }
        }
        return noteType;
    }

    public void setNoteType(NoteType noteType) {
        synchronized (this) {
            this.noteType = noteType;
            type = noteType == null ? null : noteType.getId();
            noteType__resolvedKey = type;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeString(this.status);
        dest.writeString(this.title);
        dest.writeString(this.textContent);
        dest.writeString(this.voiceContent);
        dest.writeValue(this.type);
        dest.writeLong(date != null ? date.getTime() : -1);
        dest.writeParcelable(this.noteType, flags);
        dest.writeValue(this.noteType__resolvedKey);
    }

    protected Note(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.status = in.readString();
        this.title = in.readString();
        this.textContent = in.readString();
        this.voiceContent = in.readString();
        this.type = (Long) in.readValue(Long.class.getClassLoader());
        long tmpDate = in.readLong();
        this.date = tmpDate == -1 ? null : new Date(tmpDate);
        this.daoSession = in.readParcelable(DaoSession.class.getClassLoader());
        this.myDao = in.readParcelable(NoteDao.class.getClassLoader());
        this.noteType = in.readParcelable(NoteType.class.getClassLoader());
        this.noteType__resolvedKey = (Long) in.readValue(Long.class.getClassLoader());
    }

    public static final Parcelable.Creator<Note> CREATOR = new Parcelable.Creator<Note>() {
        @Override
        public Note createFromParcel(Parcel source) {
            return new Note(source);
        }

        @Override
        public Note[] newArray(int size) {
            return new Note[size];
        }
    };
}
